Depth = 256;
Width = 32;
Address_radix = hex;
Data_radix = bin;
% Program RAM Data %                                   -- This program will test these instructions
						       -- lw, addiu, subiu, andi, ori, xori, srl,
						       -- sll, sra, and j.
Content
  Begin
00 : 10001100000000010000000000101100	;		-- lw $s1, 2C($s0)	 / 	load word in adress 2C + s0 to s1	// s1 = 3
04 : 00100100001000100000000000000111	;		-- addiu $s2, $s1, 7	 / 	add immediate s2 = s1 + 7		// s2 = A
08 : 01000000010000110000000000000110	;		-- subiu $s3, $s2, 6	 / 	sub immediate s3 = s2 - 6		// s3 = 4
0C : 00110000011001000000000000000101	;		-- andi $s4, $s3, 5	 / 	and immediate s4 = s3 and 5		// s4 = 4
10 : 00110100100001010000000000001001	;		-- ori $s5, $s4, 9	 / 	or immediate s5 = s4 or 9		// s5 = D
14 : 00111000100001100000000000000110	;		-- xori $s6, $s5, F	 / 	xorimmediate s6 = s5 xor F		// s6 = 2
18 : 00000000000001010011100010000010	;		-- srl $s7, $s5, 2	 / 	shift right s7 = s5 shifted right twice	// s7 = 3
1C : 00000000000001110100000011000000	;		-- sll $s7, $s5, 2	 / 	shift left s8 = s7 shifted left 3 times // s8 = 18
20 : 10001100000010010000000000110000	;		-- lw $s9, 30($s0)	 / 	load wordin adress 30 + s0 to s9	// s9 = F00000FF
24 : 00000000000010010101000010000011	;		-- sra $s10, $s9, 2	 /  s10 = s9 shifted arith right  2 times 	// s10 = FC00003F
28 : 00001000000000000000000000001010	;		-- j  28		 / 	infinite loop
2C : 00000000000000000000000000000011	;		-- 3
30 : 11110000000000000000000011111111	; 		-- F00000FF

End;
